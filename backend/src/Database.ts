//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { DengueInformationEntity } from './db/DengueInformation.entity';
import { PreventionTipsEntity } from './db/PreventionTips.entity';
import { SymptomsEntity } from './db/Symptoms.entity';
import { TreatmentOptionsEntity } from './db/TreatmentOptions.entity';
import { UserStoriesEntity } from './db/UserStories.entity';
import { ResourcesEntity } from './db/Resources.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      DengueInformationEntity,
      PreventionTipsEntity,
      SymptomsEntity,
      TreatmentOptionsEntity,
      UserStoriesEntity,
      ResourcesEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      DengueInformation: [
        {
          title: 'title 1',
          description: 'description 1',
          imageUrl: 'imageUrl 1',
          linkToWHO: 'linkToWHO 1',
          id: 14,
        },
        {
          title: 'title 2',
          description: 'description 2',
          imageUrl: 'imageUrl 2',
          linkToWHO: 'linkToWHO 2',
          id: 9,
        },
        {
          title: 'title 3',
          description: 'description 3',
          imageUrl: 'imageUrl 3',
          linkToWHO: 'linkToWHO 3',
          id: 99,
        },
        {
          title: 'title 4',
          description: 'description 4',
          imageUrl: 'imageUrl 4',
          linkToWHO: 'linkToWHO 4',
          id: 45,
        },
        {
          title: 'title 5',
          description: 'description 5',
          imageUrl: 'imageUrl 5',
          linkToWHO: 'linkToWHO 5',
          id: 8,
        },
      ],
      PreventionTips: [
        {
          tipTitle: 'tipTitle 1',
          description: 'description 1',
          preventiveMeasures: 'preventiveMeasures 1',
          imageUrl: 'imageUrl 1',
          id: 89,
        },
        {
          tipTitle: 'tipTitle 2',
          description: 'description 2',
          preventiveMeasures: 'preventiveMeasures 2',
          imageUrl: 'imageUrl 2',
          id: 62,
        },
        {
          tipTitle: 'tipTitle 3',
          description: 'description 3',
          preventiveMeasures: 'preventiveMeasures 3',
          imageUrl: 'imageUrl 3',
          id: 44,
        },
        {
          tipTitle: 'tipTitle 4',
          description: 'description 4',
          preventiveMeasures: 'preventiveMeasures 4',
          imageUrl: 'imageUrl 4',
          id: 82,
        },
        {
          tipTitle: 'tipTitle 5',
          description: 'description 5',
          preventiveMeasures: 'preventiveMeasures 5',
          imageUrl: 'imageUrl 5',
          id: 77,
        },
      ],
      Symptoms: [
        {
          symptomName: 'symptomName 1',
          description: 'description 1',
          imageUrl: 'imageUrl 1',
          id: 38,
        },
        {
          symptomName: 'symptomName 2',
          description: 'description 2',
          imageUrl: 'imageUrl 2',
          id: 52,
        },
        {
          symptomName: 'symptomName 3',
          description: 'description 3',
          imageUrl: 'imageUrl 3',
          id: 88,
        },
        {
          symptomName: 'symptomName 4',
          description: 'description 4',
          imageUrl: 'imageUrl 4',
          id: 97,
        },
        {
          symptomName: 'symptomName 5',
          description: 'description 5',
          imageUrl: 'imageUrl 5',
          id: 93,
        },
      ],
      TreatmentOptions: [
        {
          treatmentName: 'treatmentName 1',
          description: 'description 1',
          imageUrl: 'imageUrl 1',
          id: 69,
        },
        {
          treatmentName: 'treatmentName 2',
          description: 'description 2',
          imageUrl: 'imageUrl 2',
          id: 38,
        },
        {
          treatmentName: 'treatmentName 3',
          description: 'description 3',
          imageUrl: 'imageUrl 3',
          id: 82,
        },
        {
          treatmentName: 'treatmentName 4',
          description: 'description 4',
          imageUrl: 'imageUrl 4',
          id: 0,
        },
        {
          treatmentName: 'treatmentName 5',
          description: 'description 5',
          imageUrl: 'imageUrl 5',
          id: 51,
        },
      ],
      UserStories: [
        {
          storyTitle: 'storyTitle 1',
          story: 'story 1',
          imageUrl: 'imageUrl 1',
          id: 69,
        },
        {
          storyTitle: 'storyTitle 2',
          story: 'story 2',
          imageUrl: 'imageUrl 2',
          id: 80,
        },
        {
          storyTitle: 'storyTitle 3',
          story: 'story 3',
          imageUrl: 'imageUrl 3',
          id: 3,
        },
        {
          storyTitle: 'storyTitle 4',
          story: 'story 4',
          imageUrl: 'imageUrl 4',
          id: 60,
        },
        {
          storyTitle: 'storyTitle 5',
          story: 'story 5',
          imageUrl: 'imageUrl 5',
          id: 86,
        },
      ],
      Resources: [
        {
          resourceName: 'resourceName 1',
          description: 'description 1',
          resourceUrl: 'resourceUrl 1',
          id: 44,
        },
        {
          resourceName: 'resourceName 2',
          description: 'description 2',
          resourceUrl: 'resourceUrl 2',
          id: 75,
        },
        {
          resourceName: 'resourceName 3',
          description: 'description 3',
          resourceUrl: 'resourceUrl 3',
          id: 11,
        },
        {
          resourceName: 'resourceName 4',
          description: 'description 4',
          resourceUrl: 'resourceUrl 4',
          id: 87,
        },
        {
          resourceName: 'resourceName 5',
          description: 'description 5',
          resourceUrl: 'resourceUrl 5',
          id: 61,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource(
        'DengueInformationEntity',
        data.DengueInformation,
      );
      await this.SeedResource('PreventionTipsEntity', data.PreventionTips);
      await this.SeedResource('SymptomsEntity', data.Symptoms);
      await this.SeedResource('TreatmentOptionsEntity', data.TreatmentOptions);
      await this.SeedResource('UserStoriesEntity', data.UserStories);
      await this.SeedResource('ResourcesEntity', data.Resources);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
